#!/usr/bin/env bash

# environment
#
# Copyright 2020 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: initialize-vm
# Description: Initialize a VM.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Initialize a VM."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --name-prefix <prefix> --description <description>"
    echo "        --processors <processors> --ram <size> --disk-size <size>"
    echo "        --installer-iso <iso>"
    echo "OPTIONS"
    echo "    --description <description>"
    echo "        Specify the VM's description."
    echo "    --disk-size <size>"
    echo "        Specify the VM's maximum hard disk size, in MB."
    echo "    --help"
    echo "        Display this help text."
    echo "    --installer-iso <iso>"
    echo "        Specify the path to the installer ISO."
    echo "    --name-prefix <prefix>"
    echo "        Specify the VM's name prefix."
    echo "    --processors <processors>"
    echo "        Specify the VM's processor count."
    echo "    --ram <size>"
    echo "        Specify the VM's RAM size, in MB."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --name-prefix foo --description Foo --processors 2 --ram 4096"
    echo "        --disk-size 262144 --installer-iso ~/Downloads/foo.iso"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function create_vm()
{
    local -r options=(
        "--name"       "$name"
        "--basefolder" "$vms"
        "--ostype"     "Debian_64"
        "--register"
    )

    if ! vboxmanage createvm "${options[@]}"; then
        abort "VM creation failure"
    fi
}

function create_sata_controller()
{
    local -r options=(
        "$name"

        "--name"        "$sata_controller"
        "--add"         "sata"
        "--controller"  "IntelAhci"
        "--portcount"   "2"
        "--hostiocache" "on"
        "--bootable"    "on"
    )

    if ! vboxmanage storagectl "${options[@]}"; then
        abort "SATA controller creation failure"
    fi
}

function create_disk()
{
    local -r options=(
        "disk"

        "--filename" "$disk"
        "--size"     "$disk_size"
        "--format"   "VDI"
    )

    if ! vboxmanage createmedium "${options[@]}"; then
        abort "hard disk creation failure"
    fi
}

function attach_optical_drive()
{
    local -r options=(
        "$name"

        "--storagectl"   "$sata_controller"
        "--device"       "0"
        "--port"         "0"
        "--type"         "dvddrive"
        "--medium"       "$installer_iso"
        "--passthrough"  "off"
        "--hotpluggable" "off"
        "--tempeject"    "off"
    )

    if ! vboxmanage storageattach "${options[@]}"; then
        abort "optical drive attachment failure"
    fi
}

function attach_disk()
{
    local -r options=(
        "$name"

        "--storagectl"    "$sata_controller"
        "--device"        "0"
        "--port"          "1"
        "--type"          "hdd"
        "--medium"        "$disk"
        "--mtype"         "normal"
        "--nonrotational" "off"
        "--discard"       "off"
        "--hotpluggable"  "off"
    )

    if ! vboxmanage storageattach "${options[@]}"; then
        abort "hard disk attachment failure"
    fi
}

function configure_vm()
{
    local -r options=(
        "$name"

        "--snapshotfolder" "default"
        "--clipboard-mode" "disabled"
        "--draganddrop"    "disabled"

        "--description" "($version) $description"

        "--memory"    "$ram"
        "--boot1"     "dvd"
        "--boot2"     "disk"
        "--boot3"     "none"
        "--boot4"     "none"
        "--chipset"   "piix3"
        "--mouse"     "usbtablet"
        "--apic"      "on"
        "--ioapic"    "on"
        "--firmware"  "bios"
        "--rtcuseutc" "on"

        "--cpus"            "$processors"
        "--cpuexecutioncap" "100"
        "--pae"             "on"

        "--paravirtprovider" "default"
        "--hwvirtex"         "on"
        "--nestedpaging"     "on"

        "--vram"               "128"
        "--monitorcount"       "1"
        "--graphicscontroller" "vmsvga"
        "--accelerate2dvideo"  "off"
        "--accelerate3d"       "off"
        "--vrde"               "off"
        "--recording"          "off"

        "--audio"           "pulse"
        "--audiocontroller" "ac97"
        "--audiocodec"      "ad1980"
        "--audioout"        "on"
        "--audioin"         "off"

        "--nic1"            "nat"
        "--nictype1"        "82540EM"
        "--macaddress1"     "auto"
        "--cableconnected1" "on"

        "--nic2"             "hostonly"
        "--hostonlyadapter2" "vboxnet0"
        "--nictype2"         "82540EM"
        "--macaddress2"      "auto"
        "--cableconnected2"  "on"

        "--usb"     "on"
        "--usbehci" "off"
        "--usbxhci" "off"
    )

    if ! vboxmanage modifyvm "${options[@]}"; then
        abort "VM configuration failure"
    fi
}

function await_customization_completion()
{
    local response="no"

    while [[ "$response" != "yes" ]]; do
        read -r -p "Customization is complete (yes/no)? " response
    done
}

function start_vm()
{
    local -r options=(
        "$name"

        "--type" "gui"
    )

    if ! vboxmanage startvm "${options[@]}"; then
        abort "VM start failure"
    fi
}

function await_install_completion()
{
    local response="no"

    while [[ "$response" != "yes" ]]; do
        read -r -p "Install is complete (yes/no)? " response
    done
}

function await_shutdown()
{
    local response="no"

    while [[ "$response" != "yes" ]]; do
        read -r -p "VM is shutdown (yes/no)? " response
    done
}

function insert_guest_additions_iso()
{
    local -r options=(
        "$name"

        "--storagectl"   "$sata_controller"
        "--device"       "0"
        "--port"         "0"
        "--type"         "dvddrive"
        "--medium"       "additions"
        "--passthrough"  "off"
        "--hotpluggable" "off"
        "--tempeject"    "off"
    )

    if ! vboxmanage storageattach "${options[@]}"; then
        abort "VirtualBox guest additions ISO insertion failure"
    fi
}

function take_post_install_snapshot()
{
    local -r options=(
        "$name"

        "take"          "post-install"
        "--description" "post-install"
    )

    if ! vboxmanage snapshot "${options[@]}"; then
        abort "snapshot failure"
    fi
}

function initialize_vm()
{
    local -r vms="$HOME/virtual_machines"
    local -r name="$name_prefix-$version"
    local -r sata_controller="sata"
    local -r disk="$vms/$name/$name.vdi"

    create_vm
    create_sata_controller
    create_disk
    attach_optical_drive
    attach_disk
    configure_vm
    await_customization_completion
    start_vm
    await_install_completion
    await_shutdown
    insert_guest_additions_iso
    take_post_install_snapshot
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( dirname "$script" )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --description)
                if [[ -n "$description" ]]; then
                    abort "description already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "description not specified"
                fi

                local -r description="$1"; shift
                ;;
            --disk-size)
                if [[ -n "$disk_size" ]]; then
                    abort "maximum hard disk size already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "maximum hard disk size not specified"
                fi

                local -r disk_size="$1"; shift
                ;;
            --installer-iso)
                if [[ -n "$installer_iso" ]]; then
                    abort "installer ISO path already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "installer ISO path not specified"
                fi

                local -r installer_iso="$1"; shift
                ;;
            --name-prefix)
                if [[ -n "$name_prefix" ]]; then
                    abort "name prefix already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "name prefix not specified"
                fi

                local -r name_prefix="$1"; shift
                ;;
            --processors)
                if [[ -n "$processors" ]]; then
                    abort "processor count already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "processor count not specified"
                fi

                local -r processors="$1"; shift
                ;;
            --ram)
                if [[ -n "$ram" ]]; then
                    abort "RAM size already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "RAM size not specified"
                fi

                local -r ram="$1"; shift
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if [[ -z "$description" ]]; then
        abort "'--description' must be specified"
    fi

    if [[ -z "$disk_size" ]]; then
        abort "'--disk-size' must be specified"
    fi

    if [[ -z "$installer_iso" ]]; then
        abort "'--installer-iso' must be specified"
    fi

    if [[ -z "$name_prefix" ]]; then
        abort "'--name-prefix' must be specified"
    fi

    if [[ -z "$processors" ]]; then
        abort "'--processors' must be specified"
    fi

    if [[ -z "$ram" ]]; then
        abort "'--ram' must be specified"
    fi

    initialize_vm
}

main "$@"
