#!/usr/bin/env bash

# environment
#
# Copyright 2020 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: initialize-vm
# Description: Initialize a VM.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Initialize a VM."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --name-prefix <prefix> --disk-size <size> [--installer-iso <iso>]"
    echo "OPTIONS"
    echo "    --disk-size <size>"
    echo "        Specify the VM's maximum hard disk size, in MB."
    echo "    --help"
    echo "        Display this help text."
    echo "    --installer-iso <iso>"
    echo "        Specify the path to the installer ISO. If an installer ISO is not"
    echo "        specified, the Debian 10.3.0 (Buster) AMD64 network installer ISO will"
    echo "        be downloaded and used."
    echo "    --name-prefix <prefix>"
    echo "        Specify the VM's name prefix."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --name-prefix foo --disk-size 262144"
    echo "    $mnemonic --name-prefix foo --disk-size 262144"
    echo "        --installer-iso ~/Downloads/foo.iso"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function create_vm()
{
    local -r options=(
        "--name"       "$name"
        "--basefolder" "$vms"
        "--ostype"     "Debian_64"
        "--register"
    )

    if ! vboxmanage createvm "${options[@]}"; then
        abort "VM creation failure"
    fi
}

function create_sata_controller()
{
    local -r options=(
        "$name"

        "--name"        "$sata_controller"
        "--add"         "sata"
        "--controller"  "IntelAhci"
        "--portcount"   "2"
        "--hostiocache" "on"
        "--bootable"    "on"
    )

    if ! vboxmanage storagectl "${options[@]}"; then
        abort "SATA controller creation failure"
    fi
}

function create_disk()
{
    local -r options=(
        "disk"

        "--filename" "$disk"
        "--size"     "$disk_size"
        "--format"   "VDI"
    )

    if ! vboxmanage createmedium "${options[@]}"; then
        abort "hard disk creation failure"
    fi
}

function attach_optical_drive()
{
    if [[ -z "$installer_iso" ]]; then
        local -r installer_iso="$HOME/Downloads/debian-10.3.0-amd64-netinst.iso"

        if ! wget -O "$installer_iso" https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-10.3.0-amd64-netinst.iso; then
            abort "Debian 10.3.0 (Buster) AMD64 network installer ISO download failure"
        fi
    fi

    local -r options=(
        "$name"

        "--storagectl"   "$sata_controller"
        "--device"       "0"
        "--port"         "0"
        "--type"         "dvddrive"
        "--medium"       "$installer_iso"
        "--passthrough"  "off"
        "--hotpluggable" "off"
        "--tempeject"    "off"
    )

    if ! vboxmanage storageattach "${options[@]}"; then
        abort "optical drive attachment failure"
    fi
}

function attach_disk()
{
    local -r options=(
        "$name"

        "--storagectl"    "$sata_controller"
        "--device"        "0"
        "--port"          "1"
        "--type"          "hdd"
        "--medium"        "$disk"
        "--mtype"         "normal"
        "--nonrotational" "off"
        "--discard"       "off"
        "--hotpluggable"  "off"
    )

    if ! vboxmanage storageattach "${options[@]}"; then
        abort "hard disk attachment failure"
    fi
}

function initialize_vm()
{
    local -r vms="$HOME/virtual_machines"
    local -r name="$name_prefix-$version"
    local -r sata_controller="sata"
    local -r disk="$vms/$name/$name.vdi"

    create_vm
    create_sata_controller
    create_disk
    attach_optical_drive
    attach_disk
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( dirname "$script" )
    local -r version=$( git -C "$repository" describe --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --disk-size)
                if [[ -n "$disk_size" ]]; then
                    abort "maximum hard disk size already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "maximum hard disk size not specified"
                fi

                local -r disk_size="$1"; shift
                ;;
            --installer-iso)
                if [[ -n "$installer_iso" ]]; then
                    abort "installer ISO path already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "installer ISO path not specified"
                fi

                local -r installer_iso="$1"; shift
                ;;
            --name-prefix)
                if [[ -n "$name_prefix" ]]; then
                    abort "name prefix already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "name prefix not specified"
                fi

                local -r name_prefix="$1"; shift
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if [[ -z "$disk_size" ]]; then
        abort "'--disk-size' must be specified"
    fi

    if [[ -z "$name_prefix" ]]; then
        abort "'--name-prefix' must be specified"
    fi

    initialize_vm
}

main "$@"
